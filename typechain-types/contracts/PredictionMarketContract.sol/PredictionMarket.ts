/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PredictionMarket {
  export type BetInfoStruct = {
    position: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<boolean>;
  };

  export type BetInfoStructOutput = [number, BigNumber, boolean] & {
    position: number;
    amount: BigNumber;
    claimed: boolean;
  };
}

export interface PredictionMarketInterface extends utils.Interface {
  functions: {
    "MAX_TREASURY_FEE()": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "betBear(uint256,uint256)": FunctionFragment;
    "betBull(uint256,uint256)": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "claimTreasury()": FunctionFragment;
    "claimable(uint256,address)": FunctionFragment;
    "closeRound(uint256,uint8)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "moch()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setMinBetAmount(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setTreasuryFee(uint256)": FunctionFragment;
    "startNewRound(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "unpause()": FunctionFragment;
    "userRounds(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TREASURY_FEE"
      | "adminAddress"
      | "betBear"
      | "betBull"
      | "claim"
      | "claimTreasury"
      | "claimable"
      | "closeRound"
      | "currentRound"
      | "getUserRounds"
      | "getUserRoundsLength"
      | "ledger"
      | "minBetAmount"
      | "moch"
      | "operatorAddress"
      | "owner"
      | "pause"
      | "paused"
      | "recoverToken"
      | "renounceOwnership"
      | "rounds"
      | "setAdmin"
      | "setMinBetAmount"
      | "setOperator"
      | "setTreasuryFee"
      | "startNewRound"
      | "transferOwnership"
      | "treasuryAmount"
      | "treasuryFee"
      | "unpause"
      | "userRounds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "betBear",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "betBull",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBetAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRounds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betBear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betBull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRounds", data: BytesLike): Result;

  events: {
    "BetBear(address,uint256,uint256)": EventFragment;
    "BetBull(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EndRound(uint256,uint8)": EventFragment;
    "NewAdminAddress(address)": EventFragment;
    "NewMinBetAmount(uint256,uint256)": EventFragment;
    "NewOperatorAddress(address)": EventFragment;
    "NewTreasuryFee(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsCalculated(uint256,uint256,uint256,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "TreasuryClaim(uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinBetAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperatorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BetBearEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
}
export type BetBearEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BetBearEventObject
>;

export type BetBearEventFilter = TypedEventFilter<BetBearEvent>;

export interface BetBullEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
}
export type BetBullEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BetBullEventObject
>;

export type BetBullEventFilter = TypedEventFilter<BetBullEvent>;

export interface ClaimEventObject {
  sender: string;
  round: BigNumber;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface EndRoundEventObject {
  round: BigNumber;
  outcome: number;
}
export type EndRoundEvent = TypedEvent<
  [BigNumber, number],
  EndRoundEventObject
>;

export type EndRoundEventFilter = TypedEventFilter<EndRoundEvent>;

export interface NewAdminAddressEventObject {
  admin: string;
}
export type NewAdminAddressEvent = TypedEvent<
  [string],
  NewAdminAddressEventObject
>;

export type NewAdminAddressEventFilter = TypedEventFilter<NewAdminAddressEvent>;

export interface NewMinBetAmountEventObject {
  round: BigNumber;
  minBetAmount: BigNumber;
}
export type NewMinBetAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewMinBetAmountEventObject
>;

export type NewMinBetAmountEventFilter = TypedEventFilter<NewMinBetAmountEvent>;

export interface NewOperatorAddressEventObject {
  operator: string;
}
export type NewOperatorAddressEvent = TypedEvent<
  [string],
  NewOperatorAddressEventObject
>;

export type NewOperatorAddressEventFilter =
  TypedEventFilter<NewOperatorAddressEvent>;

export interface NewTreasuryFeeEventObject {
  round: BigNumber;
  treasuryFee: BigNumber;
}
export type NewTreasuryFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewTreasuryFeeEventObject
>;

export type NewTreasuryFeeEventFilter = TypedEventFilter<NewTreasuryFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {
  round: BigNumber;
}
export type PauseEvent = TypedEvent<[BigNumber], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardsCalculatedEventObject {
  round: BigNumber;
  rewardBaseCalAmount: BigNumber;
  rewardAmount: BigNumber;
  treasuryAmount: BigNumber;
}
export type RewardsCalculatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  RewardsCalculatedEventObject
>;

export type RewardsCalculatedEventFilter =
  TypedEventFilter<RewardsCalculatedEvent>;

export interface StartRoundEventObject {
  round: BigNumber;
}
export type StartRoundEvent = TypedEvent<[BigNumber], StartRoundEventObject>;

export type StartRoundEventFilter = TypedEventFilter<StartRoundEvent>;

export interface TokenRecoveryEventObject {
  token: string;
  amount: BigNumber;
}
export type TokenRecoveryEvent = TypedEvent<
  [string, BigNumber],
  TokenRecoveryEventObject
>;

export type TokenRecoveryEventFilter = TypedEventFilter<TokenRecoveryEvent>;

export interface TreasuryClaimEventObject {
  amount: BigNumber;
}
export type TreasuryClaimEvent = TypedEvent<
  [BigNumber],
  TreasuryClaimEventObject
>;

export type TreasuryClaimEventFilter = TypedEventFilter<TreasuryClaimEvent>;

export interface UnpauseEventObject {
  round: BigNumber;
}
export type UnpauseEvent = TypedEvent<[BigNumber], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PredictionMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    betBear(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    betBull(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      epochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimable(
      epoch: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeRound(
      _epochToEnd: PromiseOrValue<BigNumberish>,
      _outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserRounds(
      user: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], PredictionMarket.BetInfoStructOutput[], BigNumber]
    >;

    getUserRoundsLength(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    moch(overrides?: CallOverrides): Promise<[string]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        roundClosed: boolean;
        outcome: number;
      }
    >;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBetAmount(
      _minBetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startNewRound(
      _lockTimestamp: PromiseOrValue<BigNumberish>,
      _closeTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRounds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  betBear(
    epoch: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  betBull(
    epoch: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    epochs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTreasury(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimable(
    epoch: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeRound(
    _epochToEnd: PromiseOrValue<BigNumberish>,
    _outcome: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  getUserRounds(
    user: PromiseOrValue<string>,
    cursor: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PredictionMarket.BetInfoStructOutput[], BigNumber]>;

  getUserRoundsLength(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ledger(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  moch(overrides?: CallOverrides): Promise<string>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number
    ] & {
      epoch: BigNumber;
      startTimestamp: BigNumber;
      lockTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      totalAmount: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      roundClosed: boolean;
      outcome: number;
    }
  >;

  setAdmin(
    _adminAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBetAmount(
    _minBetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryFee(
    _treasuryFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startNewRound(
    _lockTimestamp: PromiseOrValue<BigNumberish>,
    _closeTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRounds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    betBear(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    betBull(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      epochs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTreasury(overrides?: CallOverrides): Promise<void>;

    claimable(
      epoch: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeRound(
      _epochToEnd: PromiseOrValue<BigNumberish>,
      _outcome: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], PredictionMarket.BetInfoStructOutput[], BigNumber]
    >;

    getUserRoundsLength(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    moch(overrides?: CallOverrides): Promise<string>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        roundClosed: boolean;
        outcome: number;
      }
    >;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBetAmount(
      _minBetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewRound(
      _lockTimestamp: PromiseOrValue<BigNumberish>,
      _closeTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userRounds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BetBear(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BetBearEventFilter;
    BetBear(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BetBearEventFilter;

    "BetBull(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BetBullEventFilter;
    BetBull(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): BetBullEventFilter;

    "Claim(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      sender?: PromiseOrValue<string> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ClaimEventFilter;

    "EndRound(uint256,uint8)"(
      round?: PromiseOrValue<BigNumberish> | null,
      outcome?: null
    ): EndRoundEventFilter;
    EndRound(
      round?: PromiseOrValue<BigNumberish> | null,
      outcome?: null
    ): EndRoundEventFilter;

    "NewAdminAddress(address)"(admin?: null): NewAdminAddressEventFilter;
    NewAdminAddress(admin?: null): NewAdminAddressEventFilter;

    "NewMinBetAmount(uint256,uint256)"(
      round?: PromiseOrValue<BigNumberish> | null,
      minBetAmount?: null
    ): NewMinBetAmountEventFilter;
    NewMinBetAmount(
      round?: PromiseOrValue<BigNumberish> | null,
      minBetAmount?: null
    ): NewMinBetAmountEventFilter;

    "NewOperatorAddress(address)"(
      operator?: null
    ): NewOperatorAddressEventFilter;
    NewOperatorAddress(operator?: null): NewOperatorAddressEventFilter;

    "NewTreasuryFee(uint256,uint256)"(
      round?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: null
    ): NewTreasuryFeeEventFilter;
    NewTreasuryFee(
      round?: PromiseOrValue<BigNumberish> | null,
      treasuryFee?: null
    ): NewTreasuryFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Pause(uint256)"(
      round?: PromiseOrValue<BigNumberish> | null
    ): PauseEventFilter;
    Pause(round?: PromiseOrValue<BigNumberish> | null): PauseEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardsCalculated(uint256,uint256,uint256,uint256)"(
      round?: PromiseOrValue<BigNumberish> | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null,
      treasuryAmount?: null
    ): RewardsCalculatedEventFilter;
    RewardsCalculated(
      round?: PromiseOrValue<BigNumberish> | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null,
      treasuryAmount?: null
    ): RewardsCalculatedEventFilter;

    "StartRound(uint256)"(
      round?: PromiseOrValue<BigNumberish> | null
    ): StartRoundEventFilter;
    StartRound(
      round?: PromiseOrValue<BigNumberish> | null
    ): StartRoundEventFilter;

    "TokenRecovery(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenRecoveryEventFilter;
    TokenRecovery(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenRecoveryEventFilter;

    "TreasuryClaim(uint256)"(amount?: null): TreasuryClaimEventFilter;
    TreasuryClaim(amount?: null): TreasuryClaimEventFilter;

    "Unpause(uint256)"(
      round?: PromiseOrValue<BigNumberish> | null
    ): UnpauseEventFilter;
    Unpause(round?: PromiseOrValue<BigNumberish> | null): UnpauseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    betBear(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    betBull(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      epochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimable(
      epoch: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeRound(
      _epochToEnd: PromiseOrValue<BigNumberish>,
      _outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    moch(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBetAmount(
      _minBetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startNewRound(
      _lockTimestamp: PromiseOrValue<BigNumberish>,
      _closeTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRounds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betBear(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    betBull(
      epoch: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      epochs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTreasury(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      epoch: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeRound(
      _epochToEnd: PromiseOrValue<BigNumberish>,
      _outcome: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: PromiseOrValue<string>,
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBetAmount(
      _minBetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryFee(
      _treasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startNewRound(
      _lockTimestamp: PromiseOrValue<BigNumberish>,
      _closeTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRounds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
